Les concepts clés de la POO:

> La classe : 
	- une classe est un ensemble de code contenant des variables et des fonctions permettant de créer des objets. Une classe peut contenir plusieurs objets.
	- structure rassemblant à la fois les données et les méthodes pour les manipuler (c’est l’équivalent du type).

> Les objets : 
	- un objet est un bloc de code mêlant des variables et des fonctions, appelées respectivement attributs et méthodes. Les attributs définissent les caractéristiques d’un objet d’une classe, les méthodes définissent quant à elles les fonctions propres aux instances d’une classe.
	- un objet est une instance de classe (équivalent de la variable). C'est la représentation 'physique' du modèle décrit dans la classe.

> L’encapsulation : 
	- l'encapsulation permet d’enfermer dans une capsule les données brutes afin d’éviter des erreurs de manipulation ou de corruptions des données. 
	- L’encapsulation permet ainsi de cacher des méthodes et des attributs à l’extérieur de la classe.

> L’abstraction : 
	- le concept d’abstraction consiste à cacher les détails inutiles à l’utilisateur final d’une classe. Il va ainsi pouvoir utiliser une classe dans son code de programmation tout en ne sachant pas comment celle-ci a été développée.

> L’héritage : 
	- le concept d’héritage signifie qu’une classe B va hériter des mêmes attributs et méthodes qu’une classe A. Lorsqu’une instance de la classe B est créée, on peut alors appeler les méthodes présentes dans la classe A par la classe B. Cela va permettre de faire gagner du temps au programmeur.

> Le polymorphisme : 
	- lorsqu'une classe hérite des méthodes d’une classe parent, il est possible de surcharger une méthode, qui consiste à redéfinir la méthode de la classe parent pour que les deux classes ne fassent pas les mêmes tâches.


> Constructeur/Destructeur : 
	- ce sont deux méthodes appelées systématiquement lors de la création (instanciation) d'un objet et de sa destruction (libération). Le constructeur porte le même nom que la classe, le destructeur également, mais précédé du signe ~.
> Surcharge/Surdéfinition : 
	- permet d’avoir plusieurs méthodes du même nom mais avec des paramètres différents (nombre et/ou type).











- facilité d'organisation grâce aux objets

- méthode plus intuitive car plus proche de la réalité, principe d'héritage

- gestion de projet plus efficace : la sécurisation via encapsulation permet d'avoir plusieurs développeurs travaillant sur un même projet, chacun ne travaille que sur les implémentations le concernant.

- le code est "factorisé" : il est plus facilement lisible et donc corrigible, et est moins lourd